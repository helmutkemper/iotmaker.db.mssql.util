package main

import (
  "context"
  "crypto/aes"
  "crypto/cipher"
  "crypto/md5"
  "crypto/rand"
  "database/sql"
  "encoding/hex"
  "encoding/json"
  "errors"
  "fmt"
  _ "github.com/denisenkom/go-mssqldb"
  mssql "github.com/denisenkom/go-mssqldb"
  mssqlUtil "github.com/helmutkemper/iotmaker.db.mssql.util"
  "github.com/rivo/tview"
  "io"
  "io/ioutil"
  "os"
  "reflect"
  "time"
)

const (
	KConfigFilePath          = "./config.bin"
	KMainPageName            = "InitialListOfFunctions"
	KFormFieldWidth          = 60
	KFilePassword            = "qazyhnvfredcxokjuy"
	KSqlConnectionString     = "server=%v;port=%v;database=%v;user id=%v;password=%v"
	KMongoDbConnectionString = "mongodb://%v:%v@%v:%v"
)

var (
	app         *tview.Application
	pages       *tview.Pages
	formMongoBb *tview.Form
	formSql     *tview.Form
	modal       *tview.Modal

  sqlDb       *sql.DB

	ctx         context.Context

	environmentVarMongoServer   string
	environmentVarMongoPort     string
	environmentVarMongoDatabase string
	environmentVarMongoUser     string
	environmentVarMongoPassword string

	environmentVarSqlServer   string
	environmentVarSqlPort     string
	environmentVarSqlDatabase string
	environmentVarSqlUser     string
	environmentVarSqlPassword string
)

func GetEnvironmentVarMongoDb() {
	environmentVarMongoServer = os.Getenv("MONGO_SERVER")
	environmentVarMongoPort = os.Getenv("MONGO_PORT")
	environmentVarMongoDatabase = os.Getenv("MONGO_DATABASE")
	environmentVarMongoUser = os.Getenv("MONGO_USER")
	environmentVarMongoPassword = os.Getenv("MONGO_PASSWORD")
}

func GetEnvironmentVarSql() {
	environmentVarSqlServer = os.Getenv("SQL_SERVER")
	environmentVarSqlPort = os.Getenv("SQL_PORT")
	environmentVarSqlDatabase = os.Getenv("SQL_DATABASE")
	environmentVarSqlUser = os.Getenv("SQL_USER")
	environmentVarSqlPassword = os.Getenv("SQL_PASSWORD")
}

func onSuccessEvent(explanation string) {
	modal.ClearButtons()
	modal.SetText(explanation).
		AddButtons([]string{"Ok"}).
		SetDoneFunc(func(buttonIndex int, buttonLabel string) {
			if buttonLabel == "Ok" {
				pages.SendToFront(KMainPageName)
			}
		})
	pages.SendToFront("ModalPage")
}

func onErrorEvent(explanation, message string) {
	modal = tview.NewModal().
		SetText(explanation + "\n\n" + message).
		AddButtons([]string{"Quit"}).
		SetDoneFunc(func(buttonIndex int, buttonLabel string) {
			if buttonLabel == "Quit" {
				app.Stop()
			}
		})
}

func SetEnvironmentVarMongoDb() error {
	var err error
	err = os.Setenv("MONGO_SERVER", environmentVarMongoServer)
	if err != nil {
		onErrorEvent("on save environment var error", err.Error())
		return err
	}

	err = os.Setenv("MONGO_PORT", environmentVarMongoPort)
	if err != nil {
		onErrorEvent("on save environment var error", err.Error())
		return err
	}

	err = os.Setenv("MONGO_DATABASE", environmentVarMongoDatabase)
	if err != nil {
		onErrorEvent("on save environment var error", err.Error())
		return err
	}

	err = os.Setenv("MONGO_USER", environmentVarMongoUser)
	if err != nil {
		onErrorEvent("on save environment var error", err.Error())
		return err
	}

	err = os.Setenv("MONGO_PASSWORD", environmentVarMongoPassword)
	if err != nil {
		onErrorEvent("on save environment var error", err.Error())
		return err
	}

	return nil
}

func SetEnvironmentVarSql() error {
	var err error
	err = os.Setenv("SQL_SERVER", environmentVarSqlServer)
	if err != nil {
		onErrorEvent("on save environment var error", err.Error())
		return err
	}

	err = os.Setenv("SQL_PORT", environmentVarSqlPort)
	if err != nil {
		onErrorEvent("on save environment var error", err.Error())
		return err
	}

	err = os.Setenv("SQL_DATABASE", environmentVarSqlDatabase)
	if err != nil {
		onErrorEvent("on save environment var error", err.Error())
		return err
	}

	err = os.Setenv("SQL_USER", environmentVarSqlUser)
	if err != nil {
		onErrorEvent("on save environment var error", err.Error())
		return err
	}

	err = os.Setenv("SQL_PASSWORD", environmentVarSqlPassword)
	if err != nil {
		onErrorEvent("on save environment var error", err.Error())
		return err
	}

	return nil
}

func listOfInitialFunctions() *tview.List {
	return tview.NewList().
		AddItem(
			"SQL Connection",
			"SQL connection configuration page.",
			's',
			func() {
				pages.SendToFront("SqlFormPage")
			},
		).
		AddItem(
			"MongoDb Connection",
			"MongoDb connection configuration page.",
			'm',
			func() {
				pages.SendToFront("MongoDbFormPage")
			},
		).
		AddItem(
			"Load configuration by envvar",
			"Load data from environment var",
			'e',
			func() {
				GetEnvironmentVarMongoDb()
				GetEnvironmentVarSql()

				if environmentVarMongoServer == "" && environmentVarSqlServer == "" {
					pages.SendToFront(KMainPageName)
					onSuccessEvent("Environment variables not found!")
					return
				}

				mountPageMongoDbForm()
				mountPageSqlForm()
				pages.SendToFront(KMainPageName)
				onSuccessEvent("Data loaded!")
			},
		).
		AddItem(
			"Load configuration file",
			"Load data from file "+KConfigFilePath,
			'l',
			func() {
				err := connectionDataAsJSonLoad()
				if err != nil {
					return
				}

				mountPageMongoDbForm()
				mountPageSqlForm()
				pages.SendToFront(KMainPageName)
				onSuccessEvent("Data loaded!")
			},
		).
		AddItem(
			"Save configuration file",
			"Save data into file "+KConfigFilePath,
			's',
			func() {
				_ = connectionDataAsJSonSave()
				onSuccessEvent("Data successful salved!")
			},
		).
		AddItem(
			"Connect",
			"Connect to database",
			'c',
			func() {
				var err error
				sqlDb, err = openSQLConnection()
				if err != nil {
					onSuccessEvent(err.Error())
				}
			},
		).
		AddItem(
			"Manual",
			"Manual page",
			'm',
			nil,
		).
		AddItem(
			"About",
			"About page",
			'a',
			nil,
		).
		AddItem(
			"Quit",
			"Press to quit",
			'q',
			func() {
				app.Stop()
			},
		)
}

func mountPageInitialListOfFunctions() {
	pages.AddPage("InitialListOfFunctions", listOfInitialFunctions(), true, true)
}

func mountFormMongoDb() *tview.Flex {
	explanationText := tview.NewTextView().SetWordWrap(true).
		SetText(
			"Please enter the connection information for the MongoDb database.",
		)

	formMongoBb = tview.NewForm().
		AddInputField("Server", environmentVarMongoServer, KFormFieldWidth, nil, nil).
		AddInputField("Port", environmentVarMongoPort, KFormFieldWidth, nil, nil).
		AddInputField("Database", environmentVarMongoDatabase, KFormFieldWidth, nil, nil).
		AddInputField("User", environmentVarMongoUser, KFormFieldWidth, nil, nil).
		AddPasswordField("Password", environmentVarMongoPassword, KFormFieldWidth, '*', nil).
		AddButton("Save", func() {
			getFormMongoDb()
			err := SetEnvironmentVarMongoDb()
			if err != nil {
				pages.SendToFront("ModalPage")
			}
			//onSuccessEvent("Data successful salved!")
			pages.SendToFront(KMainPageName)
		}).
		AddButton("Main page", func() {
			pages.SendToFront(KMainPageName)
		})

	mainContent := tview.NewFlex().
		SetDirection(tview.FlexRow).
		AddItem(explanationText, 2, 1, false).
		AddItem(formMongoBb, -1, 1, true)

	return tview.NewFlex().
		AddItem(mainContent, 70, 1, true).
		AddItem(tview.NewBox(), 40, 1, false)
}

func mountPageMongoDbForm() {
	pages.AddPage("MongoDbFormPage", mountFormMongoDb(), true, true)
}

func mountFormSql() *tview.Flex {
	explanationText := tview.NewTextView().SetWordWrap(true).
		SetText(
			"Please enter the connection information for the SQL database.",
		)

	formSql = tview.NewForm().
		AddInputField("Server", environmentVarSqlServer, KFormFieldWidth, nil, nil).
		AddInputField("Port", environmentVarSqlPort, KFormFieldWidth, nil, nil).
		AddInputField("Database", environmentVarSqlDatabase, KFormFieldWidth, nil, nil).
		AddInputField("User", environmentVarSqlUser, KFormFieldWidth, nil, nil).
		AddPasswordField("Password", environmentVarSqlPassword, KFormFieldWidth, '*', nil).
		AddButton("Save", func() {
			getFormSql()
			err := SetEnvironmentVarSql()
			if err != nil {
				pages.SendToFront("ModalPage")
			}
			//onSuccessEvent("Data successful salved!")
			pages.SendToFront(KMainPageName)
		}).
		AddButton("Main page", func() {
			pages.SendToFront(KMainPageName)
		})

	mainContent := tview.NewFlex().
		SetDirection(tview.FlexRow).
		AddItem(explanationText, 2, 1, false).
		AddItem(formSql, -1, 1, true)

	return tview.NewFlex().
		AddItem(mainContent, 70, 1, true).
		AddItem(tview.NewBox(), 40, 1, false)
}

func mountPageSqlForm() {
	pages.AddPage("SqlFormPage", mountFormSql(), true, true)
}

func mountPageModal() {
	modal = tview.NewModal()
	pages.AddPage("ModalPage", modal, true, true)
}











type TableTest struct {
  Id  int64 `sql:"id" primaryKey:"true"`
  Nome  string `sql:"nome"`
}
type TableRelacao struct {
  Test  []TableTest `sql:"TableTest" primaryKeyQuery:"SELECT id_test, name, id FROM relacao" foreignKeyQuery:"SELECT id, nome FROM test WHERE id = %v" foreignKeyScan:"&columnId, &columnNome" foreignKeyVars:"  var columnId int64\n  var columnNome string\n" primaryKeyScan:"&columnId, &columnIdTest, &columnName" primaryKeyVars:"  var columnName string\n  var columnId int64\n  var columnIdTest int64\n" primaKeyFieldName:"columnId"`
  Name  string `sql:"name"`
  Id  int64 `sql:"id" primaryKey:"true"`
}


func test(ctx context.Context, db *sql.DB, id int64) error {
  //var err error

  el := &TableRelacao{}
  element := reflect.ValueOf(el).Elem()

  for i := 0; i < element.NumField(); i += 1 {
    typeField := element.Type().Field(i)
    tag := typeField.Tag

    tagField := tag.Get("sql")
    tagPrimaKeyFieldName := tag.Get("primaKeyFieldName")
    tagPrimaryKeyQuery := tag.Get("primaryKeyQuery")
    tagForeignKeyQuery := tag.Get("foreignKeyQuery")
    tagPrimaryKeyScan  := tag.Get("primaryKeyScan")
    tagForeignKeyScan  := tag.Get("foreignKeyScan")
    tagPrimaryKeyVars  := tag.Get("primaryKeyVars")
    tagForeignKeyVars  := tag.Get("foreignKeyVars")

    tagFieldBool := tagField == ""
    tagPrimaKeyFieldNameBool := tagPrimaKeyFieldName == ""
    tagPrimaryKeyQueryBool := tagPrimaryKeyQuery == ""
    tagForeignKeyQueryBool := tagForeignKeyQuery == ""
    tagPrimaryKeyScanBool  := tagPrimaryKeyScan == ""
    tagForeignKeyScanBool  := tagForeignKeyScan == ""
    tagPrimaryKeyVarsBool  := tagPrimaryKeyVars == ""
    tagForeignKeyVarsBool  := tagForeignKeyVars == ""

    andPrimaryKeyLogic := tagPrimaKeyFieldNameBool && tagFieldBool && tagPrimaryKeyQueryBool && tagPrimaryKeyScanBool && tagPrimaryKeyVarsBool == true
    andForeignKeyLogic := tagPrimaKeyFieldNameBool && tagFieldBool && tagForeignKeyQueryBool && tagForeignKeyScanBool && tagForeignKeyVarsBool == true
    orPrimaryKeyLogic := tagPrimaKeyFieldNameBool && tagFieldBool || tagPrimaryKeyQueryBool || tagPrimaryKeyScanBool || tagPrimaryKeyVarsBool == true
    orForeignKeyLogic := tagPrimaKeyFieldNameBool && tagFieldBool || tagForeignKeyQueryBool || tagForeignKeyScanBool || tagForeignKeyVarsBool == true

    if andPrimaryKeyLogic == false && andForeignKeyLogic == false && orPrimaryKeyLogic == true && orForeignKeyLogic == true {
      return errors.New("tags 'sql', 'primaKeyFieldName', 'primaryKeyQuery', 'foreignKeyQuery', 'primaryKeyScan', 'foreignKeyScan', 'primaryKeyVars' and 'foreignKeyVars' are necessary for this function")
    }


  }

  return nil
}

/*
 sql:"TableTest"
 primaryKeyQuery:"SELECT id_test, name, id FROM relacao"
 foreignKeyQuery:"SELECT id, nome FROM test WHERE id = %v"
 foreignKeyScan:"&columnId, &columnNome"
 foreignKeyVars:"  var columnId int64\n  var columnNome string\n"
 primaryKeyScan:"&columnId, &columnIdTest, &columnName"
 primaryKeyVars:"  var columnName string\n  var columnId int64\n  var columnIdTest int64\n"
 primaKeyFieldName:"columnId"
*/

func correct(ctx context.Context, db *sql.DB, id int64, toProcessFunc func(interface{})) error {

  var err error
  var primaryKeyWows, foreignKeyWows  *sql.Rows
  var tableRelacao TableRelacao

  primaryKeyWows, err = db.QueryContext(ctx, fmt.Sprintf("SELECT id, id_test, name FROM relacao"))
  if err != nil {
    return err
  }

  for primaryKeyWows.Next() {
    var tableRelacaoColumnName string
    var tableRelacaoColumnId int64
    var tableRelacaoColumnIdTest int64

    err = primaryKeyWows.Scan(&tableRelacaoColumnId, &tableRelacaoColumnIdTest, &tableRelacaoColumnName)
    if err != nil {
      return err
    }

    foreignKeyWows, err = db.QueryContext(ctx, fmt.Sprintf("SELECT id, nome FROM test WHERE id = %v", tableRelacaoColumnId))
    if err != nil {
      return err
    }

    var dataTableTest = make([]TableTest, 0)
    for foreignKeyWows.Next() {
      var tableTestColumnId int64
      var tableTestColumnNome string

      err = foreignKeyWows.Scan(&tableTestColumnId, &tableTestColumnNome)
      if err != nil {
        return err
      }

      dataTableTest = append(dataTableTest, TableTest{
        Id:   tableTestColumnId,
        Nome: tableTestColumnNome,
      })
    }

    tableRelacao = TableRelacao{
      Test: dataTableTest,
      Name: tableRelacaoColumnName,
      Id:   tableRelacaoColumnId,
    }
    functionCallBack(tableRelacao)
  }

  return nil
}

func functionCallBack(data interface{}) {

}

//Server=localhost;Database=master;Trusted_Connection=True;
func main() {
  //test()
  var err error
  var db *sql.DB
  var list2 map[string]mssqlUtil.ColumnType
  var toPrint mssqlUtil.ToMakeStruct


  ctx = mssqlUtil.GetContextBackground()

  connString := fmt.Sprintf("server=%s;port=%d;database=%s;user id=%s;password=%s",
    "localhost",
    1434,
    "kemper2",
    "CS\\helmut.kemper",
    "temp@123")
  db, err = sql.Open("sqlserver", connString)
  if err != nil {
    panic(err)
  }
  fmt.Printf("%v\n", connString)
  err = db.PingContext(ctx)
  if err != nil {
    panic(err)
  }

  defer db.Close()

  var code = mssqlUtil.GoToMSSqlCode{
    Db:  db,
    Ctx: ctx,
  }
  err, toPrint = code.ToStruct()
  if err != nil {
    panic(err)
  }

  fmt.Printf("%v\n", toPrint.MakeStructText("sql"))

os.Exit(0)



  err, keysList := code.ListForeignKeyColumns("relacao")
  if err != nil {
    panic(err)
  }
  fmt.Printf("keysList: %+v\n\n", keysList)




  err, list2 = code.ListColumnTypes("test")
  if err != nil {
    panic(err)
  }
  fmt.Printf("%+v\n", list2)


  os.Exit(0)

  GetEnvironmentVarMongoDb()
	GetEnvironmentVarSql()

	app = tview.NewApplication()
	pages = tview.NewPages()

	mountPageInitialListOfFunctions()
	mountPageMongoDbForm()
	mountPageSqlForm()
	mountPageModal()

	pages.SendToFront(KMainPageName)
	if err := app.SetRoot(pages, true).EnableMouse(true).Run(); err != nil {
		panic(err)
	}
}

func connectionDataAsJSonLoad() error {

	if _, err := os.Stat(KConfigFilePath); os.IsNotExist(err) {
		return errors.New("file not found")
	}

	dataParsed := make(map[string]string)
	dataFile, err := ioutil.ReadFile(KConfigFilePath)
	if err != nil {
		return err
	}

	dataFile = decrypt(dataFile, KFilePassword)

	err = json.Unmarshal(dataFile, &dataParsed)
	if err != nil {
		return err
	}

	environmentVarMongoServer = dataParsed["MONGO_SERVER"]
	environmentVarMongoPort = dataParsed["MONGO_PORT"]
	environmentVarMongoDatabase = dataParsed["MONGO_DATABASE"]
	environmentVarMongoUser = dataParsed["MONGO_USER"]
	environmentVarMongoPassword = dataParsed["MONGO_PASSWORD"]
	environmentVarSqlServer = dataParsed["SQL_SERVER"]
	environmentVarSqlPort = dataParsed["SQL_PORT"]
	environmentVarSqlDatabase = dataParsed["SQL_DATABASE"]
	environmentVarSqlUser = dataParsed["SQL_USER"]
	environmentVarSqlPassword = dataParsed["SQL_PASSWORD"]

	return nil
}

func connectionDataAsJSonSave() error {
	dataToSave := map[string]string{
		"MONGO_SERVER":   environmentVarMongoServer,
		"MONGO_PORT":     environmentVarMongoPort,
		"MONGO_DATABASE": environmentVarMongoDatabase,
		"MONGO_USER":     environmentVarMongoUser,
		"MONGO_PASSWORD": environmentVarMongoPassword,
		"SQL_SERVER":     environmentVarSqlServer,
		"SQL_PORT":       environmentVarSqlPort,
		"SQL_DATABASE":   environmentVarSqlDatabase,
		"SQL_USER":       environmentVarSqlUser,
		"SQL_PASSWORD":   environmentVarSqlPassword,
	}
	dataToFile, err := json.Marshal(dataToSave)
	if err != nil {
		return err
	}

	dataToFile = encrypt(dataToFile, KFilePassword)

	err = ioutil.WriteFile(KConfigFilePath, dataToFile, 0666)
	return err
}

func getFormMongoDb() {
	environmentVarMongoServer = formMongoBb.GetFormItemByLabel("Server").(*tview.InputField).GetText()
	environmentVarMongoPort = formMongoBb.GetFormItemByLabel("Port").(*tview.InputField).GetText()
	environmentVarMongoDatabase = formMongoBb.GetFormItemByLabel("Database").(*tview.InputField).GetText()
	environmentVarMongoUser = formMongoBb.GetFormItemByLabel("User").(*tview.InputField).GetText()
	environmentVarMongoPassword = formMongoBb.GetFormItemByLabel("Password").(*tview.InputField).GetText()
}

func getFormSql() {
	environmentVarSqlServer = formSql.GetFormItemByLabel("Server").(*tview.InputField).GetText()
	environmentVarSqlPort = formSql.GetFormItemByLabel("Port").(*tview.InputField).GetText()
	environmentVarSqlDatabase = formSql.GetFormItemByLabel("Database").(*tview.InputField).GetText()
	environmentVarSqlUser = formSql.GetFormItemByLabel("User").(*tview.InputField).GetText()
	environmentVarSqlPassword = formSql.GetFormItemByLabel("Password").(*tview.InputField).GetText()
}

func encrypt(data []byte, password string) []byte {
	block, _ := aes.NewCipher([]byte(createHash(password)))
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err.Error())
	}
	nonce := make([]byte, gcm.NonceSize())
	if _, err = io.ReadFull(rand.Reader, nonce); err != nil {
		panic(err.Error())
	}
	return gcm.Seal(nonce, nonce, data, nil)
}

func decrypt(data []byte, password string) []byte {
	key := []byte(createHash(password))
	block, err := aes.NewCipher(key)
	if err != nil {
		panic(err.Error())
	}
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err.Error())
	}
	nonceSize := gcm.NonceSize()
	nonce, cipherText := data[:nonceSize], data[nonceSize:]
	plainText, err := gcm.Open(nil, nonce, cipherText, nil)
	if err != nil {
		panic(err.Error())
	}
	return plainText
}

func createHash(key string) string {
	hash := md5.New()
	hash.Write([]byte(key))
	return hex.EncodeToString(hash.Sum(nil))
}

func openSQLConnection() (*sql.DB, error) {
	connString := fmt.Sprintf(KSqlConnectionString,
		environmentVarSqlServer,
		environmentVarSqlPort,
		environmentVarSqlDatabase,
		environmentVarSqlUser,
		environmentVarSqlPassword)
	return sql.Open("sqlserver", connString)
}

type SircoiGetAddress struct {
	ClientId            int       `json:"ClientId" bson:"ClientId"`
	ID                  int       `json:"ID" bson:"ID"`
	AddressTypeID       int       `json:"ADDRESS_TYPE_ID" bson:"ADDRESS_TYPE_ID"`
	AddressTypeDs       string    `json:"ADDRESS_TYPE_DS" bson:"ADDRESS_TYPE_DS"`
	AddressDs           string    `json:"ADDRESS_DS" bson:"ADDRESS_DS"`
	NumberDs            string    `json:"NUMBER_DS" bson:"NUMBER_DS"`
	AdditionalAddressDs string    `json:"ADDITIONAL_ADDRESS_DS" bson:"ADDITIONAL_ADDRESS_DS"`
	NeighborhoodDs      string    `json:"NEIGHBORHOOD_DS" bson:"NEIGHBORHOOD_DS"`
	CityDs              string    `json:"CITY_DS" bson:"CITY_DS"`
	CountryProvinceDs   string    `json:"COUNTRY_PROVINCE_DS" bson:"COUNTRY_PROVINCE_DS"`
	CountryDs           string    `json:"COUNTRY_DS" bson:"COUNTRY_DS"`
	ZipcodeDs           string    `json:"ZIPCODE_DS" bson:"ZIPCODE_DS"`
	Main                bool      `json:"main"`
	Date                time.Time `json:"date"`
	WhoWillReceive      string    `json:"whowillreceive"`
}

func(el SircoiGetAddress) ToMongo() interface{} {
  return el
}

type SircoiBankAccount struct {
	ID                    int       `json:"ID" bson:"ID"`
	ClientID              int       `json:"ClientId" bson:"ClientId"`
	CheckingAccountUUID   string    `json:"CHECKING_ACCOUNT_UUID" bson:"CHECKING_ACCOUNT_UUID"`
	BankIdentifierNu      string    `json:"BANK_IDENTIFIER_NU" bson:"BANK_IDENTIFIER_NU"`
	BankAgencyNu          string    `json:"BANK_AGENCY_NU" bson:"BANK_AGENCY_NU"`
	CheckingAccountNu     string    `json:"CHECKING_ACCOUNT_NU" bson:"CHECKING_ACCOUNT_NU"`
	CheckingAccountTp     int       `json:"CHECKING_ACCOUNT_TP" bson:"CHECKING_ACCOUNT_TP"`
	CheckingAccountTypeDs string    `json:"CHECKING_ACCOUNT_TYPE_DS" bson:"CHECKING_ACCOUNT_TYPE_DS"`
	CheckingAcountSt      string    `json:"CHECKING_ACOUNT_ST" bson:"CHECKING_ACOUNT_ST"`
	OpeningDt             time.Time `json:"OPENING_DT" bson:"OPENING_DT"`
	ClosureDt             time.Time `json:"CLOSURE_DT" bson:"CLOSURE_DT"`
	BlockDt               time.Time `json:"BLOCK_DT" bson:"BLOCK_DT"`
}

func(el SircoiBankAccount) ToMongo() interface{} {
  return el
}

type SircoiGetCard struct {
	ID            int       `json:"ID" bson:"ID"`
	ConductorId   int       `json:"ConductorId" bson:"ConductorId"`
	ClientId      int       `json:"ClientId" bson:"ClientId"`
	RegisterDate  time.Time `json:"RegisterDate" bson:"RegisterDate"`
	Type          int       `json:"Type" bson:"Type"`
	CreatedAtDate time.Time `json:"CREATE_AT_DT" bson:"CREATE_AT_DT"`
}

func(el SircoiGetCard) ToMongo() interface{} {
  return el
}

type SircoiGetCardType struct {
	ID            int       `json:"ID" bson:"ID"`
	Name          string    `json:"NAME"`
	CreatedAtDate time.Time `json:"CREATE_AT_DT" bson:"CREATE_AT_DT"`
}

func(el SircoiGetCardType) ToMongo() interface{} {
  return el
}

type SircoiGetClientPF struct {
	ID                         int                    `json:"id"`
	PersonUUID                 string                 `json:"PERSON_UUID" bson:"PERSON_UUID"` //fixme: isto está correto?
	Name                       string                 `json:"NAME_NM" bson:"NAME_NM"`
	PersonTypeID               int                    `json:"PERSON_TYPE_ID" bson:"PERSON_TYPE_ID"`
	CPFCNPJNu                  string                 `json:"CPF_CNPJ_NU" bson:"CPF_CNPJ_NU"`
	BirthdayDt                 time.Time              `json:"BIRTHDATE_DT" bson:"BIRTHDATE_DT"`
	NationalityDs              string                 `json:"NATIONALITY_DS" bson:"NATIONALITY_DS"`
	RegistrationDt             time.Time              `json:"REGISTRATION_DT" bson:"REGISTRATION_DT"`
	PoliticallyExposedPersonFl int32                  `json:"POLITICALLY_EXPOSED_PERSON_FL" bson:"POLITICALLY_EXPOSED_PERSON_FL"`
	CreatedAtDate              time.Time              `json:"CREATE_AT_DT" bson:"CREATE_AT_DT"`
	CreatedByDs                time.Time              `json:"CREATED_BY_DS" bson:"CREATED_BY_DS"` //fixme: isto está correto?
	IsFirstAccess              bool                   `json:"IsFirstAccess" bson:"IsFirstAccess"`
	IsTempPassword             sql.NullBool           `json:"IsTempPassword" bson:"IsTempPassword"`
	Date                       sql.NullTime           `json:"Date" bson:"Date"`
	IsFirstTimeActivation      sql.NullBool           `json:"IsFirstTimeActivation" bson:"IsFirstTimeActivation"`
	DateLastShowUpdate         sql.NullTime           `json:"DateLastShowUpdate" bson:"DateLastShowUpdate"`
	UniqueID                   mssql.UniqueIdentifier `json:"UniqueID" bson:"UniqueID"`
	Status                     sql.NullInt64          `json:"Status" bson:"Status"`
	Gender                     sql.NullString         `json:"Gender" bson:"Gender"`
	RegisterID                 sql.NullInt64          `json:"RegisterID" bson:"RegisterID"`
	LastDateUpdateStatus       sql.NullTime           `json:"LastDateUpdateStatus" bson:"LastDateUpdateStatus"`
	ConductorRequestDate       sql.NullTime           `json:"ConductorRequestDate" bson:"ConductorRequestDate"`
	ReasonCancellationID       sql.NullInt64          `json:"ReasonCancellationID" bson:"ReasonCancellationID"`
	CancellationRequestDate    sql.NullTime           `json:"CancellationRequestDate" bson:"CancellationRequestDate"`
	ProfileID                  int                    `json:"ProfileID" bson:"ProfileID"`
	BloqueioDebito             sql.NullBool           `json:"BloqueioDebito" bson:"BloqueioDebito"`
}

type ClienteCompanhia struct {
	ID                         int                    `json:"id" bson:"id"`
	PersonUUID                 string                 `json:"PERSON_UUID" bson:"PERSON_UUID"`
	Name                       string                 `json:"NAME_NM" bson:"NAME_NM"`
	PersonTypeID               int                    `json:"PERSON_TYPE_ID" bson:"PERSON_TYPE_ID"`
	CPFCNPJNu                  string                 `json:"CPF_CNPJ_NU" bson:"CPF_CNPJ_NU"`
	BirthdayDt                 time.Time              `json:"BIRTHDATE_DT" bson:"BIRTHDATE_DT"`
	RegistrationDt             time.Time              `json:"REGISTRATION_DT" bson:"REGISTRATION_DT"`
	PoliticallyExposedPersonFl int32                  `json:"POLITICALLY_EXPOSED_PERSON_FL" bson:"POLITICALLY_EXPOSED_PERSON_FL"`
	CreatedAtDate              time.Time              `json:"CREATED_AT_DT" bson:"CREATED_AT_DT"`
	CreatedByDs                time.Time              `json:"CREATED_BY_DS" bson:"CREATED_BY_DS"` //fixme: isto está correto?
	IsFirstAccess              bool                   `json:"IsFirstAccess" bson:"IsFirstAccess"`
	IsTempPassword             sql.NullBool           `json:"IsTempPassword" bson:"IsTempPassword"`
	Date                       sql.NullTime           `json:"Date" bson:"Date"`
	IsFirstTimeActivation      sql.NullBool           `json:"IsFirstTimeActivation" bson:"IsFirstTimeActivation"`
	DateLastShowUpdate         sql.NullTime           `json:"DateLastShowUpdate" bson:"DateLastShowUpdate"`
	UniqueID                   mssql.UniqueIdentifier `json:"UniqueID" bson:"UniqueID"`
	Status                     sql.NullInt64          `json:"Status" bson:"Status"`
	Gender                     sql.NullString         `json:"Gender" bson:"Gender"`
	RegisterID                 sql.NullInt64          `json:"RegisterID" bson:"RegisterID"`
	LastDateUpdateStatus       sql.NullTime           `json:"LastDateUpdateStatus" bson:"LastDateUpdateStatus"`
	ConductorRequestDate       sql.NullTime           `json:"ConductorRequestDate" bson:"ConductorRequestDate"`
	ReasonCancellationID       sql.NullInt64          `json:"ReasonCancellationID" bson:"ReasonCancellationID"`
	CancellationRequestDate    sql.NullTime           `json:"CancellationRequestDate" bson:"CancellationRequestDate"`
	ProfileID                  int                    `json:"ProfileID" bson:"ProfileID"`
	BloqueioDebito             sql.NullBool           `json:"BloqueioDebito" bson:"BloqueioDebito"`
}

type SircoiGetClientPJ2 struct {
	ID                         int                    `json:"id" bson:"id"`
	PersonUUID                 string                 `json:"PERSON_UUID" bson:"PERSON_UUID"`
	Name                       string                 `json:"NAME_NM" bson:"NAME_NM"`
	PersonTypeID               int                    `json:"PERSON_TYPE_ID" bson:"PERSON_TYPE_ID"`
	CPFCNPJNu                  string                 `json:"CPF_CNPJ_NU" bson:"CPF_CNPJ_NU"`
	RegistrationDt             time.Time              `json:"REGISTRATION_DT" bson:"REGISTRATION_DT"`
	PoliticallyExposedPersonFl int32                  `json:"POLITICALLY_EXPOSED_PERSON_FL" bson:"POLITICALLY_EXPOSED_PERSON_FL"`
	CreatedAtDate              time.Time              `json:"CREATED_AT_DT" bson:"CREATED_AT_DT"`
	CreatedByDs                time.Time              `json:"CREATED_BY_DS" bson:"CREATED_BY_DS"`
	IsFirstAccess              bool                   `json:"IsFirstAccess" bson:"IsFirstAccess"`
	IsTempPassword             sql.NullBool           `json:"IsTempPassword" bson:"IsTempPassword"`
	Date                       sql.NullTime           `json:"Date" bson:"Date"`
	IsFirstTimeActivation      sql.NullBool           `json:"IsFirstTimeActivation" bson:"IsFirstTimeActivation"`
	DateLastShowUpdate         sql.NullTime           `json:"DateLastShowUpdate" bson:"DateLastShowUpdate"`
	UniqueID                   mssql.UniqueIdentifier `json:"UniqueID" bson:"UniqueID"`
	Status                     sql.NullInt64          `json:"Status" bson:"Status"`
	Gender                     sql.NullString         `json:"Gender" bson:"Gender"`
	RegisterID                 sql.NullInt64          `json:"RegisterID" bson:"RegisterID"`
	LastDateUpdateStatus       sql.NullTime           `json:"LastDateUpdateStatus" bson:"LastDateUpdateStatus"`
	ConductorRequestDate       sql.NullTime           `json:"ConductorRequestDate" bson:"ConductorRequestDate"`
	ReasonCancellationID       sql.NullInt64          `json:"ReasonCancellationID" bson:"ReasonCancellationID"`
	CancellationRequestDate    sql.NullTime           `json:"CancellationRequestDate" bson:"CancellationRequestDate"`
	ProfileID                  int                    `json:"ProfileID" bson:"ProfileID"`
	BloqueioDebito             sql.NullBool           `json:"BloqueioDebito" bson:"BloqueioDebito"`
}

func(el SircoiGetClientPJ2) ToMongo() interface{} {
  type toConvert struct {
    ID                         int                    `json:"id" bson:"id"`
    PersonUUID                 string                 `json:"PERSON_UUID" bson:"PERSON_UUID"`
    Name                       string                 `json:"NAME_NM" bson:"NAME_NM"`
    PersonTypeID               int                    `json:"PERSON_TYPE_ID" bson:"PERSON_TYPE_ID"`
    CPFCNPJNu                  string                 `json:"CPF_CNPJ_NU" bson:"CPF_CNPJ_NU"`
    RegistrationDt             time.Time              `json:"REGISTRATION_DT" bson:"REGISTRATION_DT"`
    PoliticallyExposedPersonFl int32                  `json:"POLITICALLY_EXPOSED_PERSON_FL" bson:"POLITICALLY_EXPOSED_PERSON_FL"`
    CreatedAtDate              time.Time              `json:"CREATED_AT_DT" bson:"CREATED_AT_DT"`
    CreatedByDs                time.Time              `json:"CREATED_BY_DS" bson:"CREATED_BY_DS"`
    IsFirstAccess              bool                   `json:"IsFirstAccess" bson:"IsFirstAccess"`
    IsTempPassword             interface{}            `json:"IsTempPassword" bson:"IsTempPassword"`
    Date                       interface{}            `json:"Date" bson:"Date"`
    IsFirstTimeActivation      interface{}            `json:"IsFirstTimeActivation" bson:"IsFirstTimeActivation"`
    DateLastShowUpdate         interface{}            `json:"DateLastShowUpdate" bson:"DateLastShowUpdate"`
    UniqueID                   interface{}            `json:"UniqueID" bson:"UniqueID"`
    Status                     interface{}            `json:"Status" bson:"Status"`
    Gender                     interface{}            `json:"Gender" bson:"Gender"`
    RegisterID                 interface{}            `json:"RegisterID" bson:"RegisterID"`
    LastDateUpdateStatus       interface{}            `json:"LastDateUpdateStatus" bson:"LastDateUpdateStatus"`
    ConductorRequestDate       interface{}            `json:"ConductorRequestDate" bson:"ConductorRequestDate"`
    ReasonCancellationID       interface{}            `json:"ReasonCancellationID" bson:"ReasonCancellationID"`
    CancellationRequestDate    interface{}            `json:"CancellationRequestDate" bson:"CancellationRequestDate"`
    ProfileID                  int                    `json:"ProfileID" bson:"ProfileID"`
    BloqueioDebito             interface{}            `json:"BloqueioDebito" bson:"BloqueioDebito"`
  }

  var isTempPassword =            NullBool{
    Value: el.IsTempPassword.Bool,
    Valid: el.IsTempPassword.Valid,
  }

  var date            =           NullTime{
    Value: el.Date.Time,
    Valid: el.Date.Valid,
  }

  var isFirstTimeActivation =     NullBool{
    Value: el.IsFirstTimeActivation.Bool,
    Valid: el.IsFirstTimeActivation.Valid,
  }

  var dateLastShowUpdate     =    NullTime{
    Value: el.DateLastShowUpdate.Time,
    Valid: el.DateLastShowUpdate.Valid,
  }

  var uniqueID = el.UniqueID.String()

  var status         =            NullInt64{
    Value: el.Status.Int64,
    Valid: el.Status.Valid,
  }

  var gender          =           NullString{
    Value: el.Gender.String,
    Valid: el.Gender.Valid,
  }

  var registerID       =          NullInt64{
    Value: el.RegisterID.Int64,
    Valid: el.RegisterID.Valid,
  }

  var lastDateUpdateStatus=       NullTime{
    Value: el.LastDateUpdateStatus.Time,
    Valid: el.LastDateUpdateStatus.Valid,
  }

  var conductorRequestDate =      NullTime{
    Value: el.ConductorRequestDate.Time,
    Valid: el.ConductorRequestDate.Valid,
  }

  var reasonCancellationID  =     NullInt64{
    Value: el.ReasonCancellationID.Int64,
    Valid: el.ReasonCancellationID.Valid,
  }

  var cancellationRequestDate=    NullTime{
    Value: el.CancellationRequestDate.Time,
    Valid: el.CancellationRequestDate.Valid,
  }

  var bloqueioDebito          =   NullBool{
    Value: el.BloqueioDebito.Bool,
    Valid: el.BloqueioDebito.Valid,
  }

  return toConvert{
    ID:                         el.ID,
    PersonUUID:                 el.PersonUUID,
    Name:                       el.Name,
    PersonTypeID:               el.PersonTypeID,
    CPFCNPJNu:                  el.CPFCNPJNu,
    RegistrationDt:             el.RegistrationDt,
    PoliticallyExposedPersonFl: el.PoliticallyExposedPersonFl,
    CreatedAtDate:              el.CreatedAtDate,
    CreatedByDs:                el.CreatedByDs,
    IsFirstAccess:              el.IsFirstAccess,
    IsTempPassword:             isTempPassword.ToMongo(),
    Date:                       date.ToMongo(),
    IsFirstTimeActivation:      isFirstTimeActivation.ToMongo(),
    DateLastShowUpdate:         dateLastShowUpdate.ToMongo(),
    UniqueID:                   uniqueID,
    Status:                     status.ToMongo(),
    Gender:                     gender.ToMongo(),
    RegisterID:                 registerID.ToMongo(),
    LastDateUpdateStatus:       lastDateUpdateStatus.ToMongo(),
    ConductorRequestDate:       conductorRequestDate.ToMongo(),
    ReasonCancellationID:       reasonCancellationID.ToMongo(),
    CancellationRequestDate:    cancellationRequestDate.ToMongo(),
    ProfileID:                  el.ProfileID,
    BloqueioDebito:             bloqueioDebito.ToMongo(),
  }
}

type SircoiGetCompanyActivity struct {
	ID            int       `json:"ID" bson:"ID"`
	Code          string    `json:"CODE" bson:"CODE"`
	Name          string    `json:"NAME" bson:"NAME"`
	CreatedAtDate time.Time `json:"CREATE_AT_DT" bson:"CREATE_AT_DT"`
}

func(el SircoiGetCompanyActivity) ToMongo() interface{} {
  return el
}

type SircoiGetCompanyDetail struct {
	Id                           int       `json:"Id" bson:"Id"`
	ClientId                     int       `json:"ClientId" bson:"ClientId"`
	FantasyName                  string    `json:"FantasyName" bson:"FantasyName"`
	Site                         string    `json:"Site" bson:"Site"`
	ConstitutionForm             int       `json:"ConstitutionForm" bson:"ConstitutionForm"`
	ConstitutionDate             time.Time `json:"ConstitutionDate" bson:"ConstitutionDate"`
	LastUpdateSocialContractDate time.Time `json:"LastUpdateSocialContractDate" bson:"LastUpdateSocialContractDate"`
	Successor                    string    `json:"Successor" bson:"Successor"`
	SuccessorDate                time.Time `json:"SuccessorDate" bson:"SuccessorDate"`
	PermiteContaConcessionaria   bool      `json:"PermiteContaConcessionaria" bson:"PermiteContaConcessionaria"`
	PermiteFichaCompensacao      bool      `json:"PermiteFichaCompensacao" bson:"PermiteFichaCompensacao"`
	PermiteIndefinido            bool      `json:"PermiteIndefinido" bson:"PermiteIndefinido"`
	PermiteAgendarPagamento      bool      `json:"PermiteAgendarPagamento" bson:"PermiteAgendarPagamento"`
}

func(el SircoiGetCompanyDetail) ToMongo() interface{} {
  return el
}

type SircoiGetConductorOperationType struct {
	Id            int          `json:"ID" bson:"ID"`
	Name          string       `json:"Name" bson:"Name"`
	OperationType string       `json:"OperationType" bson:"OperationType"`
	Withdraw      sql.NullBool `json:"Withdraw" bson:"Withdraw"`
	CreatedAtDate time.Time    `json:"CREATE_AT_DT" bson:"CREATE_AT_DT"`
}

func(el SircoiGetConductorOperationType) ToMongo() interface{} {
  type toConvert struct {
    Id            int          `json:"ID" bson:"ID"`
    Name          string       `json:"Name" bson:"Name"`
    OperationType string       `json:"OperationType" bson:"OperationType"`
    Withdraw      interface{}  `json:"Withdraw" bson:"Withdraw"`
    CreatedAtDate time.Time    `json:"CREATE_AT_DT" bson:"CREATE_AT_DT"`
  }

  var withdraw = NullBool{
    Value: el.Withdraw.Bool,
    Valid: el.Withdraw.Valid,
  }

  return toConvert{
    Id: el.Id,
    Name: el.Name,
    OperationType: el.OperationType,
    Withdraw: withdraw.ToMongo(),
    CreatedAtDate: el.CreatedAtDate,
  }
}

type SircoiGetEletronicAddress struct {
	ID                      int    `json:"ClientId" bson:"ClientId"`
	PersonUUID              string `json:"PERSON_UUID" bson:"PERSON_UUID"` //fixme: isto está correto?
	ElectronicAddressTypeID int    `json:"ELETRONIC_ADDRESS_TYPE_ID" bson:"ELETRONIC_ADDRESS_TYPE_ID"`
	ElectronicAddressTypeDs string `json:"ELETRONIC_ADDRESS_TYPE_DS" bson:"ELETRONIC_ADDRESS_TYPE_DS"`
	ElectronicAddressDs     string `json:"ELETRONIC_ADDRESS_DS" bson:"ELETRONIC_ADDRESS_DS"`
}

func(el SircoiGetEletronicAddress) ToMongo() interface{} {
  return el
}

type SircoiGetFinancialResponsible1 struct {
	ID                        int       `json:"ID" bson:"ID"`
	ClientId                  int       `json:"ClientId" bson:"ClientId"`
	LegalPersonUUID           string    `json:"LEGAL_PERSON_UUID" bson:"LEGAL_PERSON_UUID"`
	Name                      string    `json:"LEGALLY_RESPONSIBLE_NM" bson:"LEGALLY_RESPONSIBLE_NM"`
	LegalPersonCPFNu          string    `json:"LEGAL_PERSON_CPF_NU" bson:"LEGAL_PERSON_CPF_NU"`
	LegalPersonEmail          string    `json:"LEGALLY_RESPONSIBLE_EMAIL_DS" json:"LEGALLY_RESPONSIBLE_EMAIL_DS"`
	Procurado                 string    `json:"RELATIONSHIP_TYPE_DS" bson:"RELATIONSHIP_TYPE_DS"`
	Telefone                  string    `json:"LEGALLY_RESPONSIBLE_PHONE_NU" bson:"LEGALLY_RESPONSIBLE_PHONE_NU"`
	DataExpiracao             time.Time `json:"END_DT" bson:"END_DT"`
	PolliticallyExposedPerson int32     `json:"POLITICALLY_EXPOSED_PERSON_FL" bson:"POLITICALLY_EXPOSED_PERSON_FL"`
}

func(el SircoiGetFinancialResponsible1) ToMongo() interface{} {
  return el
}

type SircoiGetFinancialResponsible2 struct {
	ID                        int           `json:"ID" bson:"ID"`
	ClientId                  int           `json:"ClientId" bson:"ClientId"`
	LegalPersonUUID           string        `json:"LEGAL_PERSON_UUID" bson:"LEGAL_PERSON_UUID"`
	Name                      string        `json:"LEGALLY_RESPONSIBLE_NM" bson:"LEGALLY_RESPONSIBLE_NM"`
	LegalPersonCPFNu          string        `json:"LEGAL_PERSON_CPF_NU" bson:"LEGAL_PERSON_CPF_NU"`
	LegalPersonEmail          string        `json:"LEGALLY_RESPONSIBLE_EMAIL_DS" json:"LEGALLY_RESPONSIBLE_EMAIL_DS"`
	Role                      string        `json:"RELATIONSHIP_TYPE_DS" bson:"RELATIONSHIP_TYPE_DS"`
	PhoneDdd                  string        `json:"LEGALLY_RESPONSIBLE_PHONE_DDD_NU" bson:"LEGALLY_RESPONSIBLE_PHONE_DDD_NU"`
	PhoneNumber               string        `json:"LEGALLY_RESPONSIBLE_PHONE_NU" bson:"LEGALLY_RESPONSIBLE_PHONE_NU"`
	StartDate                 time.Time     `json:"START_DT" bson:"START_DT"`
	EndDate                   time.Time     `json:"END_DT" bson:"END_DT"`
	PolliticallyExposedPerson int32         `json:"POLITICALLY_EXPOSED_PERSON_FL" bson:"POLITICALLY_EXPOSED_PERSON_FL"`
	IsTempPassword            bool          `json:"IsTempPassword" bson:"IsTempPassword"`
	Status                    sql.NullInt64 `json:"Status" bson:"Status"`
	Token                     sql.NullString`json:"Token" bson:"Token"`
}

func(el SircoiGetFinancialResponsible2) ToMongo() interface{} {
  type toConvert struct {
    ID                        int           `json:"ID" bson:"ID"`
    ClientId                  int           `json:"ClientId" bson:"ClientId"`
    LegalPersonUUID           string        `json:"LEGAL_PERSON_UUID" bson:"LEGAL_PERSON_UUID"`
    Name                      string        `json:"LEGALLY_RESPONSIBLE_NM" bson:"LEGALLY_RESPONSIBLE_NM"`
    LegalPersonCPFNu          string        `json:"LEGAL_PERSON_CPF_NU" bson:"LEGAL_PERSON_CPF_NU"`
    LegalPersonEmail          string        `json:"LEGALLY_RESPONSIBLE_EMAIL_DS" json:"LEGALLY_RESPONSIBLE_EMAIL_DS"`
    Role                      string        `json:"RELATIONSHIP_TYPE_DS" bson:"RELATIONSHIP_TYPE_DS"`
    PhoneDdd                  string        `json:"LEGALLY_RESPONSIBLE_PHONE_DDD_NU" bson:"LEGALLY_RESPONSIBLE_PHONE_DDD_NU"`
    PhoneNumber               string        `json:"LEGALLY_RESPONSIBLE_PHONE_NU" bson:"LEGALLY_RESPONSIBLE_PHONE_NU"`
    StartDate                 time.Time     `json:"START_DT" bson:"START_DT"`
    EndDate                   time.Time     `json:"END_DT" bson:"END_DT"`
    PolliticallyExposedPerson int32         `json:"POLITICALLY_EXPOSED_PERSON_FL" bson:"POLITICALLY_EXPOSED_PERSON_FL"`
    IsTempPassword            bool          `json:"IsTempPassword" bson:"IsTempPassword"`
    Status                    interface{} `json:"Status" bson:"Status"`
    Token                     interface{} `json:"Token" bson:"Token"`
  }

  var status = NullInt64{
    Value: el.Status.Int64,
    Valid: el.Status.Valid,
  }

  var token = NullString{
    Value: el.Token.String,
    Valid: el.Token.Valid,
  }

  return toConvert{
    ID: el.ID,
    ClientId: el.ClientId,
    LegalPersonUUID: el.LegalPersonUUID,
    Name: el.Name,
    LegalPersonCPFNu: el.LegalPersonCPFNu,
    LegalPersonEmail: el.LegalPersonEmail,
    Role: el.Role,
    PhoneDdd: el.PhoneDdd,
    PhoneNumber: el.PhoneNumber,
    StartDate: el.StartDate,
    EndDate: el.EndDate,
    PolliticallyExposedPerson: el.PolliticallyExposedPerson,
    IsTempPassword: el.IsTempPassword,
    Status: status.ToMongo(),
    Token: token.ToMongo(),
  }
}

type SircoiGetInformacoesFinanceiras1 struct {
	ClientId               int       `json:"ClientId" bson:"ClientId"`
	EconomicGroupDs        string    `json:"ECONOMIC_GROUP_DS" bson:"ECONOMIC_GROUP_DS"`
	PatrimonyVl            float64   `json:"PATRIMONY_VL" bson:"PATRIMONY_VL"`
	PatrimonyValueChangeDt time.Time `json:"PATRIMONY_VALUE_CHANGE_DT" bson:"PATRIMONY_VALUE_CHANGE_DT"`
	EconomicActivityCNAEDs string    `json:"ECONOMIC_ACTIVITY_CNAE_DS" bson:"ECONOMIC_ACTIVITY_CNAE_DS"`
	EconomicActivityCNAECd string    `json:"ECONOMIC_ACTIVITY_CNAE_CD" bson:"ECONOMIC_ACTIVITY_CNAE_CD"`
}

func(el SircoiGetInformacoesFinanceiras1) ToMongo() interface{} {
  return el
}

type SircoiGetInformacoesFinanceiras2 struct {
	ClientId                   int     `json:"ClientId" bson:"ClientId"`
	CompanyId                  int     `json:"CompanyId" bson:"CompanyId"`
	PatrimonyVl                float64 `json:"PATRIMONY_VL" bson:"PATRIMONY_VL"`
	IDClienteCompanhiaNatureza int     `json:"CAPITAL_TYPE_ID" bson:"CAPITAL_TYPE_ID"`
	CapitalType                string  `json:"CAPITAL_TYPE_DS" bson:"CAPITAL_TYPE_DS"`
}

func(el SircoiGetInformacoesFinanceiras2) ToMongo() interface{} {
  return el
}

type SircoiGetPartner1 struct {
	ID                         int     `json:"ID" bson:"ID"`
	ClientId                   int     `json:"ClientId" bson:"ClientId"`
	LegalPersonUUID            string  `json:"LEGAL_PERSON_UUID" bson:"LEGAL_PERSON_UUID"`
	PartnerPersonUUID          string  `json:"PARTNER_PERSON_UUID" bson:"PARTNER_PERSON_UUID"`
	PartnerNm                  string  `json:"PARTNER_NM" bson:"PARTNER_NM"`
	PartnerCPFNu               string  `json:"PARTNER_CPF_NU" bson:"PARTNER_CPF_NU"`
	PartnerPercentPC           float64 `json:"PARTNER_PERCENT_PC" bson:"PARTNER_PERCENT_PC"`
	PoliticallyExposedPersonFl int     `json:"POLITICALLY_EXPOSED_PERSON_FL" bson:"POLITICALLY_EXPOSED_PERSON_FL"`
}

func(el SircoiGetPartner1) ToMongo() interface{} {
  return el
}

type SircoiGetPartner2 struct {
	ID                         int       `json:"ID" bson:"ID"`
	ClientId                   int       `json:"ClientId" bson:"ClientId"`
	LegalPersonUUID            string    `json:"LEGAL_PERSON_UUID" bson:"LEGAL_PERSON_UUID"`
	PartnerPersonUUID          string    `json:"PARTNER_PERSON_UUID" bson:"PARTNER_PERSON_UUID"`
	PartnerNm                  string    `json:"PARTNER_NM" bson:"PARTNER_NM"`
	PartnerCPFNu               string    `json:"PARTNER_CPF_NU" bson:"PARTNER_CPF_NU"`
	PartnerPercentPC           float64   `json:"PARTNER_PERCENT_PC" bson:"PARTNER_PERCENT_PC"`
	PoliticallyExposedPersonFl int32     `json:"POLITICALLY_EXPOSED_PERSON_FL" bson:"POLITICALLY_EXPOSED_PERSON_FL"`
	CreatedAtDate              time.Time `json:"CREATED_AT_DT" bson:"CREATED_AT_DT"`
	CreatedByDs                time.Time `json:"CREATED_BY_DS" bson:"CREATED_BY_DS"` //fixme: isto está correto?
	LoadingDate                time.Time `json:"LOADING_DT" bson:"LOADING_DT"`
}

func(el SircoiGetPartner2) ToMongo() interface{} {
  return el
}

type SircoiGetPhone struct {
	ID                int    `json:"ID" bson:"ID"`
	ClientID          int    `json:"PERSON_UUID" bson:"PERSON_UUID"`
	PhoneTypeID       int    `json:"PHONE_TYPE_ID" bson:"PHONE_TYPE_ID"`
	PhoneTypeDs       string `json:"PHONE_TYPE_DS" bson:"PHONE_TYPE_DS"`
	PhoneCoutryCodeDs string `json:"PHONE_COUNTRY_CODE_DS" bson:"PHONE_COUNTRY_CODE_DS"`
	PhoneAreaCodeDs   string `json:"PHONE_AREA_CODE_DS" bson:"PHONE_AREA_CODE_DS"`
	PhoneNumberDs     string `json:"PHONE_NUMBER_DS" bson:"PHONE_NUMBER_DS"`
	Main              bool   `json:"Main" bson:"Main"`
	ClientDirectorID  int    `json:"ClientDirectorID" bson:"ClientDirectorID"`
}

func(el SircoiGetPhone) ToMongo() interface{} {
  return el
}

type SircoiGetRiscoAnaliseCliente struct {
	ClientId           int       `json:"ClientId" bson:"ClientId"`
	Id                 int       `json:"Id" bson:"Id"`
	IdCliente          int       `json:"IdCliente" bson:"IdCliente"`
	IdRiscoAnaliseTipo int       `json:"IdRiscoAnaliseTipo" bson:"IdRiscoAnaliseTipo"`
	DataRegistro       time.Time `json:"DataRegistro" bson:"DataRegistro"`
	Analisado          bool      `json:"Analisado" bson:"Analisado"`
	DataAnalise        time.Time `json:"DataAnalise" bson:"DataAnalise"`
	TipoVisualizacao   int       `json:"TipoVisualizacao" bson:"TipoVisualizacao"`
}

func(el SircoiGetRiscoAnaliseCliente) ToMongo() interface{} {
  return el
}

type NullString struct {
  Value string
  Valid  bool // Valid is true if String is not NULL
}

func(el NullString) ToMongo() interface{} {
  if el.Valid == false {
    return nil
  }

  return el.Value
}

type NullInt64 struct {
  Value int64
  Valid bool // Valid is true if Int64 is not NULL
}

func(el NullInt64) ToMongo() interface{} {
  if el.Valid == false {
    return nil
  }

  return el.Value
}

type NullInt32 struct {
  Value int32
  Valid bool // Valid is true if Int32 is not NULL
}

func(el NullInt32) ToMongo() interface{} {
  if el.Valid == false {
    return nil
  }

  return el.Value
}

type NullFloat64 struct {
  Value float64
  Valid   bool // Valid is true if Float64 is not NULL
}

func(el NullFloat64) ToMongo() interface{} {
  if el.Valid == false {
    return nil
  }

  return el.Value
}

type NullBool struct {
  Value  bool
  Valid bool // Valid is true if Bool is not NULL
}

func(el NullBool) ToMongo() interface{} {
  if el.Valid == false {
    return nil
  }

  return el.Value
}

type NullTime struct {
  Value  time.Time
  Valid bool // Valid is true if Time is not NULL
}

func(el NullTime) ToMongo() interface{} {
  if el.Valid == false {
    return nil
  }

  return el.Value
}
